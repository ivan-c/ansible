---
- name: Run handlers from dependent roles
  meta: flush_handlers
  delegate_to: "{{ vm_host }}"

- name: Create bridge definition
  template:
    src: libvirt-bridge.j2
    dest: "/etc/network/interfaces.d/libvirt-bridge"
  delegate_to: "{{ vm_host }}"
  notify:
    - Restart networking
    - Update network facts
  when: vm_network_type == 'bridge'

- name: Create and start libvirt networking
  delegate_to: "{{ vm_host }}"
  when: vm_network_type == 'nat'
  block:
    - name: List all libvirt networks
      command: virsh net-list --name --all
      register: all_libvirt_networks
      changed_when: false

    - name: Create default network
      command: virsh net-define /etc/libvirt/qemu/networks/default.xml
      when: '"default" not in all_libvirt_networks.stdout_lines'
      run_once: true
      notify:
        - Update network facts
    - name: List enabled libvirt networks
      command: virsh net-list --name
      register: libvirt_networks
      changed_when: false

    - name: Start the default network
      command: virsh net-start default
      when: '"default" not in libvirt_networks.stdout_lines'
      notify:
        - Update network facts

- name: Flush network handlers
  meta: flush_handlers
  delegate_to: "{{ vm_host }}"

- name: Create VM files and directories
  delegate_to: "{{ vm_host }}"
  block:
    - name: Create a folder for VM definitions
      file:
        path: "{{ vm_definitions_dir }}"
        state: directory

    - name: Create VM image directory
      file:
        path: "{{ vm_image_dir }}/{{ inventory_hostname }}"
        state: directory

    - name: Allocate storage for the VM
      qemu_img:
        dest: "/var/lib/libvirt/images/{{ inventory_hostname }}.qcow2"
        size: 10240

    - name: Create a VM definition
      template:
        src: libvirt_domain.xml.j2
        dest: "{{ vm_definitions_dir }}/{{ inventory_hostname }}.xml"

- name: Install python-libvirt
  apt:
    name: python-libvirt
    state: present

- name: Create the VM
  virt_guest:
    guest: "{{ inventory_hostname }}"
    src: "{{ vm_definitions_dir }}/{{ inventory_hostname }}.xml"
  delegate_to: "{{ vm_host | default(inventory_hostname) }}"
  register: guests

- name: Create a group of unprovisioned systems
  group_by:
    key: "{{ guests.provisioning_status }}"

- name: Provision the VM
  delegate_to: "{{ vm_host }}"
  when: inventory_hostname in groups['unprovisioned']|default({})
  block:
    - name: Netboot the provided OS
      include_tasks: "netboot_{{ provisioned_os }}.yaml"

    - name: Wait until the VM stops
      virt:
        name: "{{ inventory_hostname }}"
        command: status
      register: libvirt_status
      until: libvirt_status.status == 'shutdown'
      delay: 60
      retries: "{{ vm_creation_timeout }}"

    - name: Start the VM
      virt_boot:
        guest: "{{ inventory_hostname }}"
        boot: hd
  rescue:
    - name: Poweroff any partially provisioned VMs
      virt:
        name: "{{ inventory_hostname }}"
        state: destroyed

    - name: Undefine any partially provisioned VMs
      virt_guest:
        guest: "{{ inventory_hostname }}"
        state: "absent"
